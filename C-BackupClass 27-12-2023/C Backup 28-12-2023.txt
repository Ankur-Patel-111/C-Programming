// C Backup 28-12-2023.

int 
------------
size : 4 byte // 32 bit
range : 0 to 4g // 2^32-1 // unsigned
          : -2g to 2g // 2^31 // signed
%d
------------------------
long int
32 bit OS : 4 byte
64 bit OS : 8 byte
size : 8 byte // 64 bit
%ld
-----------------------
float 
size : 4 byte
%f
-------------------------
double
size : 8 byte
%lf -format
----------------------------

2's complement
= when you are ddealing with Nagative number.
-ve number int k = -64; = how it will be store in negative number.
00000000000    0100 0000 //64
1's complement
11111111111    1011 1111 // 1's complement
                                       +1
---------------------------------------------
11111111111    1100 0000  // -64 
* it is useful for decimal and hexadecimal number  information store in data. 

// pointer : size   on depends  system 32bit or 64 bit.
operator :
----------------
+ , - , * , / , % .

ex-1 
int main()
{
int a=24,b;
b=a%10;  // 4
c=a/10;    // 2
printf("%d\n",b);  // 4 , % is giving to Reminder and = use last digit geting you can use % Modulus Operator. 
printf("%d\n",c);  // 2 . /   is 
}

Q-2. // write a program in c , sum of 2 digit number. 
 i/p : 49 o/p: 13
 i/p : 91 o/p :10
#include<stdio.h>
void main()
{
int num,sum;
printf("Enter the two digit number.\n");
scanf("%d,&num);
// Logic 
a=num%10; // 9
b=num/10;   // 4
sum=a+b;
printf("%d\n",sum); // 13
}

P-3 = Write a program in c ,Product of 2 digit number.
#include<stdio.h>
void main()
{
int n,res,a,b;
printf("Enter the 2 digit number \n");
scanf("%d",&n); 
a = num%10;
b = num/10;
res=a*b;
printf("%d \n",res); // 36
}
--------------------------------------------------------------------------------
p-4 // Write a Program in c , to reverse the 2 digit.
i/p : 49 , o/p : 94
i/p 91  , o/p : 19
--------------------------------------
#include<stdio.h>
void main()
{
int n,res,a,b;
printf("Enter the 2 digit number \n");
scanf("%d",&n); // 45  //  40 +5  //  10*4+5
// Logic 
a = num % 10; // 5
b = num / 10;  // 4
res = a*10+b;  // 5*10+4 = 54
printf("%d\n",res);  // 54  // 50+4  // 10*5+4
}

Note : Digit is more increasing than what we need to do.
 Ans = we can try to solve more complex problem than we can use For Loop. [ Program complexcity is more increasing than use loop concept ].   
-----------------------------------------------------------------
p-5
#include<stdio.h>
int main()
{
int n,res,a,b,c;
printf("Enter the 3 digit \n");
scanf("%d",&n);

a=n510; // 3
n=n/10; //12
b=n510; // 2
c=n/10;  //1
res = a*100+b*10+c;
printf("%d\n",res);  // 321 // 300+20+1
}

// scanf is usefull for taking  some input.
----------------$ vi p1.c
int n;
scanf("%d",&n); // 35  // pointer is always hold the Address.
Note : if Address is not there than result is Segmentation Fault.
---------------$ cc p1.c
---------------$ ./a.out
------------------------------------------------------------------------------
Note : in Assesment student will confusion
sum of 2 digit :
i/p: n= 38 : o/p : 11 
---------------------------------

sum of 2 number :
i/p : int n=11, b=22    o/p : 33
-------------------------------------------------------------------------------

// Bitwise Operator
Note : it is very important for Interview and Embedded System Programming.
in Bitwise Total 6 operator is there.
1)   <<   2)  >> 3) & 4) |  5)  ^  6)  ~(1' s complement)
-----------------------------------------------------------------------
Note : When you bitwise operator problem solve than need number into binary format than after you solve it.
 
p-1
int main()
{
int x= 0x4567,y;
y= ~x;
printf("%x"  \n",y);   //ffffba98
printf("%X   \n",y);  //FFFFBA98
printf("%d  \n",y);  //  -ve = - 17768 
}
## solve=
 0000000000000000000   0100  0101   0110  0111 // 0x4567
 1111111111111111111   1011  1010   1001  1000 // ~ 0x4567
     f       f       f        f              b        a         9         8 
 0000000000000000000    0100  0101   0110  0111
                                                                              +1
-----------------------------------------------------------------------
0000000000000000000     0100  0101   0110  1000 // 8+32+64+2561024 =  -17768
------------------------------------------------------------------------------------

// Delet bit  // <<   >> // Tomorrow 28-12-2023