# C Backup 01/01/2024

//  ++ , --
main()
{
int a=10,b=20,c
c=++a; // 21
c=b--; //19
}

p-2
post increment.
main()
{
int a=10;
printf("%d %d %d",a++,a++,a++);
                               12   11   10
, comma operator 
}

p-3
pre increment.
main()
{
int a=10;       our expectation o/p 13  12    11
printf("%d %d %d",++a,++a,++a);
                  main o/p13   13   13
, comma operator 
}

p-4 
#include<stdio.h>
int main()
{
int a=10;                            14     12     12    10
printf("%d %d %d %d\n", ++a ,a++ , ++a, a++);
                        Final o/p    14    12     14    10
}
---------------------------------------
Turnary operator

?  :
p-1
#include<stdio.h> 
int main()
{
int a=10, b=0 ,c=30;
c = b > a ?? 99 : 66 : 55;
printf("%d \n",c);  // 66
}

second p-2
#include<stdio.h>
void main()
{
int a=10 , b=0 ,c=30;
c=b>a?a>c ? 99 : 66 : 55;
printf("%d\n",c);   // 55
}
--------------------------------------------------
c = b > a ? a > c ?   99 : 66 : 55;
c = b > a ?                    : 66 : 55;
c=        55
---------------------------
p-2
main()
{

}
------------------------------
p-1 revision concept.
int main()
{
int k=41;
printf("%d\n", ~k);
printf("%x\n", ~k);
}
solution =
00000000000000 0000 
in decimal need to check 31'st bit, 
---------------------------------------------------------
p-2
main()
{
int a=10;
if(a=0)  ( if zero condition is False and non-zero condition true)
printf("vector \n");
printf("india \n");  answer // india 
}

p-3
#include<stdio.h>
main()
{
int a=10;
if(a==0)   False condition
printf("vector\n");
printf("india\n");  answer // india

p-4
#include<stdio.h>
main()
{
int a=10;   condition True both execute  
if(a!=0)   False condition
printf("vector\n");
printf("india\n");  answer // vector india

p-5
#include<stdio.h>
main()
{
int a=10;
if(a>20)   False condition both priintf not execute
{    // curley bresis is there
printf("vector\n");
printf("india\n");  answer // i
}
}

 p-6
#include<stdio.h>
main()
{
int a=10;
if(a>20)   
printf("vector\n");
else
printf("india\n");  answer //  india
-----------------------------------------------------------------------------

LOOPS

First is // while
(1) while (expression)  
{

}
----------------------------------
p-1
#include<stdio.h>
int main()
{
int a=10;
while (a>5)  // condition true vector will print.
printf("vector \n");
a++;
}
Answer is = Infinite = vector will print infinte time.
if ( { } curley breckat not there output will change . both statement is part of the loop.  )

p-2
#include<stdio.h>
int main()
{
int a=10;
while (a>5)  // { T T T T T F condition true vector will print.
printf("vector \n");
--a;
}
Answer o/p = 5 times vector will print.
--------------------------------------------------------------------------------------
p-5 
                      Bitwise :
// Right rotate bit
// Left rotate bit.
p-1  // right rotate bit // right shift
num = 170;
t=5;  How many time rotate.

0000  0000 0000 0000 0000 0000  1010  1010   // first write binary 170.

n=n>>2;

00  0000  0000  0000  0000  0000 0000   1010   10 // Right shift

-------------------------------------------------------------------------------
p-2    right , r ,rotate
0000 0000  0000  0000 0000 0000 1010 1010 //170
right roatte 1 times

0  0000 0000  0000  0000 0000 0000 1010 101
right rotate 2 times

10 0000 0000 0000 0000 0000 1010 10
right rotate 3 times

010  0000 0000 0000 0000 0000  0000 1010 1
right rotate 4 times

1010 0000  0000 0000 0000 0000 0000 1010 

Note ( In right shit asking first right side any bit delete and add to 0 (zero / if we want to delete bit put in left side)
-----------------------------------------------------------------------------

p-1 WAP to right rotate 4 times
only 3 line logic.

n1 = n<<28;
n=n>>4;
n=n | n1;
----------------------
ex- 1 in photos to copy



------------------------------------
Program -1 
#include<stdio.h>
int main()
{
unsigned int n,n1,bit;
printf("Enter the num");
scanf("%d",&n);
printf("How many bit right rotate\n");
scanf("%d",&bit);
n1 = n<<(32-bit);
n=n>>bit;
n=n | n1;
printf("%d \n",n);
}

* Note Left shift .
only 2 change  << and least most sgnificant
-------------------------------------------------

// A-7 question related to Nibble 
Nibble --- 4 byte
int x = 0xf5f0

0000 0000 0000 0000 1111 0101 1111 0101 // i/p

0000 0000 0000 0000 1111 1010 0000 1111 // o/p

----------------------------------------------------------------------

// Set bit

particular bit set

Particular bit formula : num = num | (1 << pos);
Multiple bit formula :  

00000000000001   //1
00000000000011   //3
00000000000111   //7
00000000000111   //15

num = num | (15 <<0);

0000 0000 0000 0000 1111 0101 1111 0101 // i/p
0000 0000 0000 0000 1111 0101 1111 1111 // 15 <<0
------------------------------------------------------------------------
0000 0000 0000 0000 1111 0101 1111 1111 // 0ff
---------------------------------------------------------------------------
 // Clear bit 
num = num & ~ (1<<pos); //

num = num & ~ (15<<4); //

0000 0000 0000 0000 1111 0101 1111 0101 // i/p

0000 0000 0000 0000 0000 0000 0000 1111 //15
0000 0000 0000 0000 0000 0000 1111 0000 //15 <<4
1111 1111 1111 1111 1111 1111 0000 1111 // ~ (15<<4)

------------------------------------------------------------------
p-1 // clear bit

num = num ^ (1<<pos);
main ()
{
int num = 0x 3453223;
num = num | (15 << 0);
num = num & ~ (  )
num = num
-------------------------------------------------------------